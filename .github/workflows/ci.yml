name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_los_generation
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
      
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: --health-cmd "curl -f http://localhost:6333/health" --health-interval 30s --health-timeout 10s --health-retries 3

    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Wait for Redis
        until redis-cli -h localhost -p 6379 ping | grep -q PONG; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
        # Wait for Qdrant
        until curl -f http://localhost:6333/health; do
          echo "Waiting for Qdrant..."
          sleep 2
        done
    
    - name: Run linting
      run: |
        poetry run black --check src tests
        poetry run flake8 src tests
        poetry run mypy src
    
    - name: Run unit tests
      env:
        SECRET_KEY: test-secret-key-for-ci-testing-32chars
        ENVIRONMENT: test
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_los_generation
        REDIS_URL: redis://localhost:6379/15
        QDRANT_URL: http://localhost:6333
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'test-api-key-for-ci' }}
        OLLAMA_URL: http://localhost:11434
      run: |
        poetry run pytest tests/services/ -v --cov=src --cov-report=xml --cov-report=term-missing -m "unit"
    
    - name: Run integration tests
      env:
        SECRET_KEY: test-secret-key-for-ci-testing-32chars
        ENVIRONMENT: test
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_los_generation
        REDIS_URL: redis://localhost:6379/15
        QDRANT_URL: http://localhost:6333
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'test-api-key-for-ci' }}
        OLLAMA_URL: http://localhost:11434
      run: |
        poetry run pytest tests/ -v -m "integration" --maxfail=3
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Safety scan
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-image:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t los-generation:${{ github.sha }} .
        docker tag los-generation:${{ github.sha }} los-generation:latest
    
    - name: Test Docker image
      run: |
        docker run --rm los-generation:${{ github.sha }} python -c "import src; print('Import successful')"
    
    - name: Save Docker image
      run: |
        docker save los-generation:${{ github.sha }} > los-generation.tar
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: los-generation.tar
        retention-days: 7

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install poetry
        poetry install --no-interaction
    
    - name: Run performance tests
      env:
        SECRET_KEY: test-secret-key-for-ci-testing-32chars
        ENVIRONMENT: test
        DATABASE_URL: sqlite+aiosqlite:///:memory:
        REDIS_URL: redis://localhost:6379/15
        QDRANT_URL: http://localhost:6333
        GEMINI_API_KEY: test-api-key-for-performance
        OLLAMA_URL: http://localhost:11434
      run: |
        poetry run pytest tests/ -v -m "performance" --benchmark-only --benchmark-json=benchmark.json
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark.json

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-image]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"
        echo "✅ Tests: ${{ needs.test.result }}"
        echo "✅ Security: ${{ needs.security-scan.result }}"
        echo "✅ Build: ${{ needs.build-image.result || 'skipped' }}"
    
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "❌ CI pipeline failed!"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Build: ${{ needs.build-image.result || 'skipped' }}"
        exit 1